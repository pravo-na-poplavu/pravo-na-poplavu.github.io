/*!
 * Lunr languages, `Ukrainian` language
 * Dirtily hacked by zverok from https://github.com/Tapkomet/UAStemming + official snowball's JS
 * generator
 *
 */

/**
 * export the module via AMD, CommonJS or as a browser global
 * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js
 */
;
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(factory)
  } else if (typeof exports === 'object') {
    /**
     * Node. Does not work with strict CommonJS, but
     * only CommonJS-like environments that support module.exports,
     * like Node.
     */
    module.exports = factory()
  } else {
    // Browser globals (root is window)
    factory()(root.lunr);
  }
}(this, function() {
  /**
   * Just return a value to define the module export.
   * This example returns an object, but the module
   * can return a function as the exported value.
   */
  return function(lunr) {
    /* throw error if lunr is not yet included */
    if ('undefined' === typeof lunr) {
      throw new Error('Lunr is not present. Please include / require Lunr before this script.');
    }

    /* throw error if lunr stemmer support is not yet included */
    // if ('undefined' === typeof lunr.stemmerSupport) {
    //   throw new Error('Lunr stemmer support is not present. Please include / require Lunr stemmer support before this script.');
    // }

    /* register specific locale function */
    lunr.uk = function() {
      this.pipeline.reset();
      this.pipeline.add(
        lunr.uk.trimmer,
        lunr.uk.stopWordFilter,
        lunr.uk.stemmer
      );

      // for lunr version 2
      // this is necessary so that every searched word is also stemmed before
      // in lunr <= 1 this is not needed, as it is done using the normal pipeline
      if (this.searchPipeline) {
        this.searchPipeline.reset();
        this.searchPipeline.add(lunr.uk.stemmer)
      }
    };

    /* lunr trimmer function */
    lunr.uk.wordCharacters = "\u0400-\u0484\u0487-\u052F\u1D2B\u1D78\u2DE0-\u2DFF\uA640-\uA69F\uFE2E\uFE2F";
    lunr.uk.trimmer = lunr.trimmerSupport.generateTrimmer(lunr.uk.wordCharacters);

    lunr.Pipeline.registerFunction(lunr.uk.trimmer, 'trimmer-uk');

    /* lunr stemmer function */
    lunr.uk.stemmer = (function() {
      /* create the wrapped stemmer object */
      // the BaseStemmer is from official Snowball's sources, and Ukrainian is generated by official
      // Snowball; UNLIKE other Lunar stemmers! Works, though.
      BaseStemmer = function() {
          this.setCurrent = function(value) {
              this.current = value;
              this.cursor = 0;
              this.limit = this.current.length;
              this.limit_backward = 0;
              this.bra = this.cursor;
              this.ket = this.limit;
          };

          this.getCurrent = function() {
              return this.current;
          };

          this.copy_from = function(other) {
              this.current          = other.current;
              this.cursor           = other.cursor;
              this.limit            = other.limit;
              this.limit_backward   = other.limit_backward;
              this.bra              = other.bra;
              this.ket              = other.ket;
          };

          this.in_grouping = function(s, min, max) {
              if (this.cursor >= this.limit) return false;
              var ch = this.current.charCodeAt(this.cursor);
              if (ch > max || ch < min) return false;
              ch -= min;
              if ((s[ch >>> 3] & (0x1 << (ch & 0x7))) == 0) return false;
              this.cursor++;
              return true;
          };

          this.in_grouping_b = function(s, min, max) {
              if (this.cursor <= this.limit_backward) return false;
              var ch = this.current.charCodeAt(this.cursor - 1);
              if (ch > max || ch < min) return false;
              ch -= min;
              if ((s[ch >>> 3] & (0x1 << (ch & 0x7))) == 0) return false;
              this.cursor--;
              return true;
          };

          this.out_grouping = function(s, min, max) {
              if (this.cursor >= this.limit) return false;
              var ch = this.current.charCodeAt(this.cursor);
              if (ch > max || ch < min) {
                  this.cursor++;
                  return true;
              }
              ch -= min;
              if ((s[ch >>> 3] & (0X1 << (ch & 0x7))) == 0) {
                  this.cursor++;
                  return true;
              }
              return false;
          };

          this.out_grouping_b = function(s, min, max) {
              if (this.cursor <= this.limit_backward) return false;
              var ch = this.current.charCodeAt(this.cursor - 1);
              if (ch > max || ch < min) {
                  this.cursor--;
                  return true;
              }
              ch -= min;
              if ((s[ch >>> 3] & (0x1 << (ch & 0x7))) == 0) {
                  this.cursor--;
                  return true;
              }
              return false;
          };

          this.eq_s = function(s)
          {
              if (this.limit - this.cursor < s.length) return false;
              if (this.current.slice(this.cursor, this.cursor + s.length) != s)
              {
                  return false;
              }
              this.cursor += s.length;
              return true;
          };

          this.eq_s_b = function(s)
          {
              if (this.cursor - this.limit_backward < s.length) return false;
              if (this.current.slice(this.cursor - s.length, this.cursor) != s)
              {
                  return false;
              }
              this.cursor -= s.length;
              return true;
          };

          /** @return {number} */ this.find_among = function(v)
          {
              var i = 0;
              var j = v.length;

              var c = this.cursor;
              var l = this.limit;

              var common_i = 0;
              var common_j = 0;

              var first_key_inspected = false;

              while (true)
              {
                  var k = i + ((j - i) >>> 1);
                  var diff = 0;
                  var common = common_i < common_j ? common_i : common_j; // smaller
                  // w[0]: string, w[1]: substring_i, w[2]: result, w[3]: function (optional)
                  var w = v[k];
                  var i2;
                  for (i2 = common; i2 < w[0].length; i2++)
                  {
                      if (c + common == l)
                      {
                          diff = -1;
                          break;
                      }
                      diff = this.current.charCodeAt(c + common) - w[0].charCodeAt(i2);
                      if (diff != 0) break;
                      common++;
                  }
                  if (diff < 0)
                  {
                      j = k;
                      common_j = common;
                  }
                  else
                  {
                      i = k;
                      common_i = common;
                  }
                  if (j - i <= 1)
                  {
                      if (i > 0) break; // v->s has been inspected
                      if (j == i) break; // only one item in v

                      // - but now we need to go round once more to get
                      // v->s inspected. This looks messy, but is actually
                      // the optimal approach.

                      if (first_key_inspected) break;
                      first_key_inspected = true;
                  }
              }
              do {
                  var w = v[i];
                  if (common_i >= w[0].length)
                  {
                      this.cursor = c + w[0].length;
                      if (w.length < 4) return w[2];
                      var res = w[3](this);
                      this.cursor = c + w[0].length;
                      if (res) return w[2];
                  }
                  i = w[1];
              } while (i >= 0);
              return 0;
          };

          // find_among_b is for backwards processing. Same comments apply
          this.find_among_b = function(v)
          {
              var i = 0;
              var j = v.length

              var c = this.cursor;
              var lb = this.limit_backward;

              var common_i = 0;
              var common_j = 0;

              var first_key_inspected = false;

              while (true)
              {
                  var k = i + ((j - i) >> 1);
                  var diff = 0;
                  var common = common_i < common_j ? common_i : common_j;
                  var w = v[k];
                  var i2;
                  for (i2 = w[0].length - 1 - common; i2 >= 0; i2--)
                  {
                      if (c - common == lb)
                      {
                          diff = -1;
                          break;
                      }
                      diff = this.current.charCodeAt(c - 1 - common) - w[0].charCodeAt(i2);
                      if (diff != 0) break;
                      common++;
                  }
                  if (diff < 0)
                  {
                      j = k;
                      common_j = common;
                  }
                  else
                  {
                      i = k;
                      common_i = common;
                  }
                  if (j - i <= 1)
                  {
                      if (i > 0) break;
                      if (j == i) break;
                      if (first_key_inspected) break;
                      first_key_inspected = true;
                  }
              }
              do {
                  var w = v[i];
                  if (common_i >= w[0].length)
                  {
                      this.cursor = c - w[0].length;
                      if (w.length < 4) return w[2];
                      var res = w[3](this);
                      this.cursor = c - w[0].length;
                      if (res) return w[2];
                  }
                  i = w[1];
              } while (i >= 0);
              return 0;
          };

          /* to replace chars between c_bra and c_ket in this.current by the
           * chars in s.
           */
          this.replace_s = function(c_bra, c_ket, s)
          {
              var adjustment = s.length - (c_ket - c_bra);
              this.current = this.current.slice(0, c_bra) + s + this.current.slice(c_ket);
              this.limit += adjustment;
              if (this.cursor >= c_ket) this.cursor += adjustment;
              else if (this.cursor > c_bra) this.cursor = c_bra;
              return adjustment;
          };

          this.slice_check = function()
          {
              if (this.bra < 0 ||
                  this.bra > this.ket ||
                  this.ket > this.limit ||
                  this.limit > this.current.length)
              {
                  return false;
              }
              return true;
          };

          this.slice_from = function(s)
          {
              var result = false;
              if (this.slice_check())
              {
                  this.replace_s(this.bra, this.ket, s);
                  result = true;
              }
              return result;
          };

          this.slice_del = function()
          {
              return this.slice_from("");
          };

          this.insert = function(c_bra, c_ket, s)
          {
              var adjustment = this.replace_s(c_bra, c_ket, s);
              if (c_bra <= this.bra) this.bra += adjustment;
              if (c_bra <= this.ket) this.ket += adjustment;
          };

          this.slice_to = function()
          {
              var result = '';
              if (this.slice_check())
              {
                  result = this.current.slice(this.bra, this.ket);
              }
              return result;
          };

          this.assign_to = function()
          {
              return this.current.slice(0, this.limit);
          };
      };

      st = new function Ukrainian() {
          var base = new BaseStemmer();
          /** @const */ var a_0 = [
              ["\u0430\u0434\u0436\u0435", -1, -1],
              ["\u0430\u0442\u043E\u043C", -1, -1],
              ["\u0432\u0456\u0441\u044C", -1, -1],
              ["\u0434\u0435\u0441\u044C", -1, -1],
              ["\u0437\u0434\u043E\u0440\u043E\u0432'\u044F", -1, 1],
              ["\u043A\u0440\u043E\u043A", -1, -1],
              ["\u043A\u0440\u0456\u043C", -1, -1]
          ];

          /** @const */ var a_1 = [
              ["\u043E\u0432\u0430", -1, 1],
              ["\u043E\u0432\u0435", -1, 1],
              ["\u0438\u043C\u0438", -1, 1],
              ["\u0435\u0439", -1, 1],
              ["\u0438\u0439", -1, 1],
              ["\u043E\u0432\u0438\u0439", 4, 1],
              ["\u0456\u0439", -1, 1],
              ["\u043E\u0432\u0456\u0439", 6, 1],
              ["\u0435\u043C", -1, 1],
              ["\u0438\u043C", -1, 1],
              ["\u043E\u0432\u0438\u043C", 9, 1],
              ["\u043E\u043C", -1, 1],
              ["\u0456\u043C", -1, 1],
              ["\u043E\u0432\u043E", -1, 1],
              ["\u043E\u0433\u043E", -1, 1],
              ["\u043E\u0432\u043E\u0433\u043E", 14, 1],
              ["\u0435\u043C\u0443", -1, 1],
              ["\u043E\u043C\u0443", -1, 1],
              ["\u043E\u0432\u043E\u043C\u0443", 17, 1],
              ["\u0438\u0445", -1, 1],
              ["\u043E\u0432\u0438\u0445", 19, 1],
              ["\u0456\u0445", -1, 1],
              ["\u0435\u044E", -1, 1],
              ["\u043E\u044E", -1, 1],
              ["\u043E\u0432\u043E\u044E", 23, 1],
              ["\u0443\u044E", -1, 1],
              ["\u044E\u044E", -1, 1],
              ["\u0430\u044F", -1, 1],
              ["\u043E\u0457", -1, 1],
              ["\u043E\u0432\u043E\u0457", 28, 1]
          ];

          /** @const */ var a_2 = [
              ["\u0441\u044C", -1, 1],
              ["\u0441\u044F", -1, 1]
          ];

          /** @const */ var a_3 = [
              ["\u0430\u043B\u0430", -1, 2],
              ["\u0443\u0432\u0430\u043B\u0430", 0, 2],
              ["\u0438\u043B\u0430", -1, 2],
              ["\u0448\u043B\u0430", -1, 1],
              ["\u0456\u043B\u0430", -1, 2],
              ["\u0435\u043D\u0430", -1, 2],
              ["\u0438\u0442\u0430", -1, 2],
              ["\u0430\u0432", -1, 2],
              ["\u0443\u0432\u0430\u0432", 7, 2],
              ["\u0438\u0432", -1, 2],
              ["\u0448\u043E\u0432", -1, 1],
              ["\u0443\u0439\u0442\u0435", -1, 2],
              ["\u0430\u043B\u0438", -1, 2],
              ["\u0443\u0432\u0430\u043B\u0438", 12, 2],
              ["\u0438\u043B\u0438", -1, 2],
              ["\u0448\u043B\u0438", -1, 1],
              ["\u0430\u043D\u0438\u043C\u0438", -1, 2],
              ["\u0443\u0432\u0430\u0442\u0438", -1, 2],
              ["\u0438\u0432\u0448\u0438", -1, 2],
              ["\u0443\u0439", -1, 2],
              ["\u0430\u043B\u043E", -1, 2],
              ["\u0443\u0432\u0430\u043B\u043E", 20, 2],
              ["\u0438\u043B\u043E", -1, 2],
              ["\u0448\u043B\u043E", -1, 1],
              ["\u0456\u043B\u043E", -1, 2],
              ["\u0435\u043D\u043E", -1, 2],
              ["\u0430\u043D\u0438\u0445", -1, 2],
              ["\u0438\u0442\u044C", -1, 2],
              ["\u0430\u044E\u0442\u044C", -1, 2],
              ["\u0443\u044E\u0442\u044C", -1, 2],
              ["\u0456\u044E\u0442\u044C", -1, 2],
              ["\u0456\u0442\u044C", -1, 2],
              ["\u0443\u0432\u0430\u043D\u043D\u044F", -1, 2],
              ["\u0430\u0454", -1, 2],
              ["\u0438\u0454", -1, 2],
              ["\u0443\u0454", -1, 2],
              ["\u044E\u0454", -1, 2],
              ["\u044F\u0454", -1, 2],
              ["\u0456\u0454", -1, 2],
              ["\u0438\u043B\u0456", -1, 2],
              ["\u0430\u043D\u0456", -1, 2]
          ];

          /** @const */ var a_4 = [
              ["\u0430", -1, 3],
              ["\u044F\u0442\u0430", 0, 1],
              ["\u043E\u0432", -1, 3],
              ["\u0456\u0432", -1, 3],
              ["\u0457\u0432", -1, 3],
              ["\u043E\u0457\u0432", 4, 3],
              ["\u0435", -1, 3],
              ["\u0438", -1, 3],
              ["\u0430\u043C\u0438", 7, 3],
              ["\u044F\u0442\u0430\u043C\u0438", 8, 1],
              ["\u044F\u043C\u0438", 7, 3],
              ["\u0456\u044F\u043C\u0438", 10, 3],
              ["\u0439", -1, 3],
              ["\u0435\u0439", 12, 3],
              ["\u043E\u0439", 12, 3],
              ["\u0456\u0439", 12, 3],
              ["\u043E\u043A", -1, 2],
              ["\u0438\u043B", -1, 3],
              ["\u0456\u043B", -1, 3],
              ["\u0430\u043C", -1, 3],
              ["\u044F\u0442\u0430\u043C", 19, 1],
              ["\u0435\u043C", -1, 3],
              ["\u043E\u043C", -1, 3],
              ["\u044F\u043C", -1, 3],
              ["\u0456\u044F\u043C", 23, 3],
              ["\u043E\u0454\u043C", -1, 3],
              ["\u0435\u043D", -1, 3],
              ["\u043E", -1, 3],
              ["\u044F\u0442", -1, 3],
              ["\u0443", -1, 3],
              ["\u0430\u0445", -1, 3],
              ["\u044F\u0445", -1, 3],
              ["\u043E\u044F\u0445", 31, 3],
              ["\u0456\u044F\u0445", 31, 3],
              ["\u044C", -1, 3],
              ["\u044E", -1, 3],
              ["\u0443\u044E", 35, 3],
              ["\u0456\u0454\u044E", 35, 3],
              ["\u0456\u044E", 35, 3],
              ["\u044F", -1, 3],
              ["\u043E\u044F", 39, 3],
              ["\u0456\u044F", 39, 3],
              ["\u0456", -1, 3],
              ["\u043E\u0432\u0456", 42, 3],
              ["\u0435\u0457", -1, 3],
              ["\u0456\u0457", -1, 3]
          ];

          /** @const */ var a_5 = [
              ["'", -1, 3],
              ["\u0441\u044C\u043A", -1, 3],
              ["\u0456\u0439\u0441\u044C\u043A", 1, 3],
              ["\u043D", -1, 1],
              ["\u0430\u043D", 3, 3],
              ["\u0435\u043D", 3, 3],
              ["\u0456\u0447\u043D", 3, 3],
              ["\u044C\u043D", 3, 3],
              ["\u0442", -1, 2],
              ["\u0438\u0442", 8, 3],
              ["\u043E\u0441\u0442", 8, 4],
              ["\u044E\u044E\u0442", 8, 3],
              ["\u0430\u0454\u0442", 8, 3],
              ["\u0443\u0454\u0442", 8, 3],
              ["\u044E\u0454\u0442", 8, 3],
              ["\u044F\u0454\u0442", 8, 3],
              ["\u044C", -1, 3]
          ];



          /** @return {boolean} */
          function r_exception1() {
              var /** number */ among_var;
              base.bra = base.cursor;
              among_var = base.find_among(a_0);
              if (among_var == 0)
              {
                  return false;
              }
              base.ket = base.cursor;
              if (base.cursor < base.limit)
              {
                  return false;
              }
              switch (among_var) {
                  case 1:
                      if (!base.slice_from("\u0437\u0434\u043E\u0440"))
                      {
                          return false;
                      }
                      break;
              }
              return true;
          };

          /** @return {boolean} */
          function r_adjective() {
              base.ket = base.cursor;
              if (base.find_among_b(a_1) == 0)
              {
                  return false;
              }
              base.bra = base.cursor;
              if (!base.slice_del())
              {
                  return false;
              }
              return true;
          };

          /** @return {boolean} */
          function r_postfix() {
              base.ket = base.cursor;
              if (base.find_among_b(a_2) == 0)
              {
                  return false;
              }
              base.bra = base.cursor;
              if (!base.slice_del())
              {
                  return false;
              }
              return true;
          };

          /** @return {boolean} */
          function r_verb() {
              var /** number */ among_var;
              base.ket = base.cursor;
              among_var = base.find_among_b(a_3);
              if (among_var == 0)
              {
                  return false;
              }
              base.bra = base.cursor;
              switch (among_var) {
                  case 1:
                      if (!base.slice_from("\u0442"))
                      {
                          return false;
                      }
                      break;
                  case 2:
                      if (!base.slice_del())
                      {
                          return false;
                      }
                      break;
              }
              return true;
          };

          /** @return {boolean} */
          function r_noun() {
              var /** number */ among_var;
              base.ket = base.cursor;
              among_var = base.find_among_b(a_4);
              if (among_var == 0)
              {
                  return false;
              }
              base.bra = base.cursor;
              switch (among_var) {
                  case 1:
                      if (!(base.eq_s_b("\u043D")))
                      {
                          return false;
                      }
                      if (!base.slice_del())
                      {
                          return false;
                      }
                      break;
                  case 2:
                      if (!base.slice_from("\u043A"))
                      {
                          return false;
                      }
                      break;
                  case 3:
                      if (!base.slice_del())
                      {
                          return false;
                      }
                      break;
              }
              return true;
          };

          /** @return {boolean} */
          function r_tidy_up() {
              var /** number */ among_var;
              base.ket = base.cursor;
              among_var = base.find_among_b(a_5);
              if (among_var == 0)
              {
                  return false;
              }
              base.bra = base.cursor;
              switch (among_var) {
                  case 1:
                      if (!(base.eq_s_b("\u043D")))
                      {
                          return false;
                      }
                      if (!base.slice_del())
                      {
                          return false;
                      }
                      break;
                  case 2:
                      if (!(base.eq_s_b("\u0442")))
                      {
                          return false;
                      }
                      if (!base.slice_del())
                      {
                          return false;
                      }
                      break;
                  case 3:
                      if (!base.slice_del())
                      {
                          return false;
                      }
                      break;
                  case 4:
                      if (!base.slice_from("\u0456\u0441\u0442"))
                      {
                          return false;
                      }
                      break;
              }
              return true;
          };

          this.stem = /** @return {boolean} */ function() {
              lab0: {
                  var /** number */ v_1 = base.cursor;
                  lab1: {
                      {
                          var /** number */ v_2 = base.cursor;
                          lab2: {
                              {
                                  var /** number */ c1 = base.cursor + 4;
                                  if (c1 > base.limit)
                                  {
                                      break lab2;
                                  }
                                  base.cursor = c1;
                              }
                              break lab1;
                          }
                          base.cursor = v_2;
                      }
                      break lab0;
                  }
                  base.cursor = v_1;
                  lab3: {
                      var /** number */ v_3 = base.cursor;
                      lab4: {
                          if (!r_exception1())
                          {
                              break lab4;
                          }
                          break lab3;
                      }
                      base.cursor = v_3;
                      base.limit_backward = base.cursor; base.cursor = base.limit;
                      var /** number */ v_4 = base.limit - base.cursor;
                      lab5: {
                          var /** number */ v_5 = base.limit - base.cursor;
                          lab6: {
                              if (!r_postfix())
                              {
                                  base.cursor = base.limit - v_5;
                                  break lab6;
                              }
                          }
                          lab7: {
                              var /** number */ v_6 = base.limit - base.cursor;
                              lab8: {
                                  if (!r_adjective())
                                  {
                                      break lab8;
                                  }
                                  break lab7;
                              }
                              base.cursor = base.limit - v_6;
                              lab9: {
                                  if (!r_verb())
                                  {
                                      break lab9;
                                  }
                                  break lab7;
                              }
                              base.cursor = base.limit - v_6;
                              if (!r_noun())
                              {
                                  break lab5;
                              }
                          }
                      }
                      base.cursor = base.limit - v_4;
                      var /** number */ v_7 = base.limit - base.cursor;
                      r_tidy_up();
                      base.cursor = base.limit - v_7;
                      base.cursor = base.limit_backward;
                  }
              }
              return true;
          };

          /**@return{string}*/
          this['stemWord'] = function(/**string*/word) {
              base.setCurrent(word);
              this.stem();
              return base.getCurrent();
          };
      };

      /* and return a function that stems a word for the current locale */
      return function(token) {
        // for lunr version 2
        if (typeof token.update === "function") {
          return token.update(function(word) {
            return st.stemWord(word);
          })
        } else { // for lunr version <= 1
          return st.stemWord(token);
        }
      }
    })();

    lunr.Pipeline.registerFunction(lunr.uk.stemmer, 'stemmer-uk');

    // from https://gist.github.com/kissarat/bec2bb727c9fb520043a
    lunr.uk.stopWordFilter = lunr.generateStopWordFilter('a б в г е ж з м т у я є і аж ви де до за зі ми на не ну нх ні по та ти то ту ті це цю ця ці чи ще що як їй їм їх її або але ало без був вам вас ваш вже все всю вся від він два дві для ким мож моя моє мої міг між мій нам нас наш нею неї них ніж ній ось при про пір раз рік сам сих так там теж тим тих той тою три тут хоч хто цей цим цих час щоб яка які адже буде буду будь була були було бути вами ваша ваше ваші весь вниз вона вони воно всею всім всіх втім геть далі зате його йому каже кого коли кому крім куди лише мало мене мені мною нами наша наше наші ними ніби поки пора сама саме саму самі свою своє свої себе собі став така таке такі твоя твоє твій тебе тими тобі того тоді тому туди хоча хіба цими цієї інша інше інші буває будеш більш вгору внизу вісім кожен кожна кожне кожні краще ледве майже менше могти можна нього однак потім самим самих самій свого своєї своїх собою такий також тобою трохи усюди усіма хочеш цього цьому часто через якого іноді інший інших багато будемо будете будуть більше всього всьому далеко десять досить другий дійсно завжди звідси зовсім кругом кілька можуть навіть навіщо небудь низько ніколи нікуди нічого обидва одного однієї просто раніше раптом самими самого самому скрізь тільки близько важлива важливе важливі вдалині зайнята занадто значить навколо нарешті нерідко повинно посеред початку пізніше сказала сказати скільки спасибі частіше важливий зазвичай зайнятий звичайно здається найбільш недалеко особливо потрібно спочатку сьогодні численна численне численні відсотків звідусіль нещодавно численний будь-ласка безперервно'.split(' '));

    lunr.Pipeline.registerFunction(lunr.uk.stopWordFilter, 'stopWordFilter-uk');
  };
}))
